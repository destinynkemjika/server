const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIO(server, {
  cors: {
    origin: 'https://cryptosocial.vercel.app', // Adjust this for production to your frontend URL (e.g., https://your-netlify-site.netlify.app)
    methods: ['GET', 'POST'],
  },
});

// Initialize Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// Middleware to parse JSON
app.use(express.json());

// Create a table for messages in Supabase (run this in Supabase SQL Editor if not already done):
// CREATE TABLE messages (
//   id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
//   match_id TEXT NOT NULL,
//   sender_id TEXT NOT NULL,
//   receiver_id TEXT NOT NULL,
//   message TEXT NOT NULL,
//   timestamp TIMESTAMP DEFAULT NOW() NOT NULL
// );

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Join a chat room based on matchId
  socket.on('joinChat', (matchId) => {
    socket.join(matchId);
    console.log(`User ${socket.id} joined chat room: ${matchId}`);
  });

  // Handle sending a message
  socket.on('sendMessage', async (data) => {
    const { matchId, senderId, receiverId, message } = data;

    // Save message to Supabase
    const { error } = await supabase
      .from('messages')
      .insert({
        match_id: matchId,
        sender_id: senderId,
        receiver_id: receiverId,
        message: message,
      });

    if (error) {
      console.error('Error saving message to Supabase:', error);
      socket.emit('error', 'Failed to send message');
      return;
    }

    // Broadcast the message to the chat room
    io.to(matchId).emit('receiveMessage', {
      senderId,
      message,
      timestamp: new Date().toISOString(),
    });
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});